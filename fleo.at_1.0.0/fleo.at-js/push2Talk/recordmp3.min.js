!function(window){var WORKER_PATH="/fleo.at-js/push2Talk/recorderWorker.js",encoderWorker=new Worker("/fleo.at-js/push2Talk/mp3Worker.js"),Recorder=function(source,cfg){var config=cfg||{},bufferLen=config.bufferLen||4096,numChannels=config.numChannels||1;this.context=source.context,this.node=(this.context.createScriptProcessor||this.context.createJavaScriptNode).call(this.context,bufferLen,numChannels,numChannels);var worker=new Worker(config.workerPath||WORKER_PATH);worker.postMessage({command:"init",config:{sampleRate:this.context.sampleRate,numChannels:numChannels}});var recording=!1,currCallback;function parseWav(wav){function readInt(i,bytes){for(var ret=0,shft=0;bytes;)ret+=wav[i]<<shft,shft+=8,i++,bytes--;return ret}if(1!=readInt(20,2))throw"Invalid compression code, not PCM";if(1!=readInt(22,2))throw"Invalid number of channels, not 1";return{sampleRate:readInt(24,4),bitsPerSample:readInt(34,2),samples:wav.subarray(44)}}function Uint8ArrayToFloat32Array(u8a){for(var f32Buffer=new Float32Array(u8a.length),i=0;i<u8a.length;i++){var value=u8a[i<<1]+(u8a[1+(i<<1)]<<8);value>=32768&&(value|=-32768),f32Buffer[i]=value/32768}return f32Buffer}function uploadAudio(mp3Data){var reader=new FileReader;reader.onload=function(event){var fd=new FormData,mp3Name=encodeURIComponent((myNumber[0]+myNumber[2]).replace("#","")+"_audio_recording_"+(new Date).getTime()+".mp3");console.log("mp3name = "+mp3Name),fd.append("fname",mp3Name),fd.append("data",event.target.result),$.ajax({type:"POST",url:"/fleo.at-php/uploadPush2Talk.php",data:fd,processData:!1,contentType:!1}).done((function(data){}))},reader.readAsDataURL(mp3Data)}this.node.onaudioprocess=function(e){if(recording){for(var buffer=[],channel=0;channel<numChannels;channel++)buffer.push(e.inputBuffer.getChannelData(channel));worker.postMessage({command:"record",buffer:buffer})}},this.configure=function(cfg){for(var prop in cfg)cfg.hasOwnProperty(prop)&&(config[prop]=cfg[prop])},this.record=function(){recording=!0},this.stop=function(){recording=!1},this.clear=function(){worker.postMessage({command:"clear"})},this.getBuffer=function(cb){currCallback=cb||config.callback,worker.postMessage({command:"getBuffer"})},this.exportWAV=function(cb,type){if(currCallback=cb||config.callback,type=type||config.type||"audio/wav",!currCallback)throw new Error("Callback not set");worker.postMessage({command:"exportWAV",type:type})},worker.onmessage=function(e){var blob=e.data,arrayBuffer,fileReader=new FileReader;fileReader.onload=function(){arrayBuffer=this.result;var buffer,data=parseWav(new Uint8Array(arrayBuffer));console.log(data),console.log("Converting to Mp3"),encoderWorker.postMessage({cmd:"init",config:{mode:3,channels:1,samplerate:data.sampleRate,bitrate:data.bitsPerSample}}),encoderWorker.postMessage({cmd:"encode",buf:Uint8ArrayToFloat32Array(data.samples)}),encoderWorker.postMessage({cmd:"finish"}),encoderWorker.onmessage=function(e){var mp3Blob;"data"==e.data.cmd&&(console.log("Done converting to Mp3"),uploadAudio(new Blob([new Uint8Array(e.data.buf)],{type:"audio/mp3"})))}},fileReader.readAsArrayBuffer(blob),currCallback(blob)},source.connect(this.node),this.node.connect(this.context.destination)};window.Recorder=Recorder}(window);